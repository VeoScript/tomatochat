// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                              String                @id @default(cuid())
  userId                          String
  type                            String
  provider                        String
  providerAccountId               String
  refresh_token                   String?               @db.Text
  access_token                    String?               @db.Text
  expires_at                      Int?
  token_type                      String?
  scope                           String?
  id_token                        String?               @db.Text
  session_state                   String?
  oauth_token_secret              String?
  oauth_token                     String?
  user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id                              String                @id @default(cuid())
  sessionToken                    String                @unique
  userId                          String
  expires                         DateTime
  user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                              String                @id @default(cuid())
  name                            String?
  username                        String?
  location                        String?
  email                           String?               @unique
  emailVerified                   DateTime?
  image                           String?
  accounts                        Account[]
  sessions                        Session[]
  rooms                           Room[]
  chats                           Chat[]
  joinedrooms                     JoinedRoom[]
}

model VerificationToken {
  identifier                      String
  token                           String                @unique
  expires                         DateTime

  @@unique([identifier, token])
}

model Room {
  id                              String                @id @default(cuid())
  index                           Int                   @unique @default(autoincrement())
  photo                           String?
  name                            String                @unique
  slug                            String                @unique
  privacy                         String
  description                     String
  password                        String?
  date                            String
  joinedroom                      JoinedRoom[]
  chats                           Chat[]
  user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                          String
}

model JoinedRoom {
  id                              String                @id @default(cuid())
  index                           Int                   @unique @default(autoincrement())
  indicator                       Boolean               @default(true)
  date                            String
  room                            Room                  @relation(fields: [roomSlug], references: [slug], onDelete: Cascade)
  roomSlug                        String
  user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                          String
}

model Chat {
  id                              String                @id @default(cuid())
  index                           Int                   @unique @default(autoincrement())
  message                         String
  date                            String
  room                            Room                  @relation(fields: [roomSlug], references: [slug], onDelete: Cascade)
  roomSlug                        String
  user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                          String
}
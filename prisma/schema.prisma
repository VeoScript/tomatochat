  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
  }

  datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
  }

  model Account {
    id                              String                @id @default(cuid())
    userId                          String
    type                            String
    provider                        String
    providerAccountId               String
    refresh_token                   String?               @db.Text
    access_token                    String?               @db.Text
    expires_at                      Int?
    token_type                      String?
    scope                           String?
    id_token                        String?               @db.Text
    session_state                   String?
    oauth_token_secret              String?
    oauth_token                     String?
    user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@unique([provider, providerAccountId])
    @@index([userId])
  }

  model Session {
    id                              String                @id @default(cuid())
    sessionToken                    String                @unique
    userId                          String
    expires                         DateTime
    user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([userId])
  }

  model VerificationToken {
    identifier                      String
    token                           String                @unique
    expires                         DateTime

    @@unique([identifier, token])
  }

  model User {
    id                              String                @id @default(cuid())
    name                            String?
    username                        String?
    location                        String?
    bio                             String?
    email                           String?               @unique
    emailVerified                   DateTime?
    image                           String?
    coverImage                      String?
    facebook                        String?
    instagram                       String?
    linkedin                        String?
    twitter                         String?
    tiktok                          String?
    youtube                         String?
    accounts                        Account[]
    sessions                        Session[]
    hobbies                         Hobbies[]
    rooms                           Room[]
    chats                           Chat[]
    joinedrooms                     JoinedRoom[]
    posts                           Post[]
    likes                           Like[]
    comments                        Comment[]
    bookmarks                       Bookmark[]
    followers                       Follows[]                                             @relation("follower")
    following                       Follows[]                                             @relation("following")
  }

  model Hobbies {
    id                              String                @id @default(cuid())
    name                            String
    user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                          String
    
    @@index([userId])
  }

  model Room {
    id                              String                @id @default(cuid())
    index                           Int                   @unique @default(autoincrement())
    photo                           String?
    name                            String                @unique
    slug                            String                @unique
    privacy                         String
    description                     String                @db.Text
    password                        String?
    date                            String
    joinedroom                      JoinedRoom[]
    chats                           Chat[]
    user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                          String
    
    @@index([userId])
  }

  model JoinedRoom {
    id                              String                @id @default(cuid())
    index                           Int                   @unique @default(autoincrement())
    indicator                       Boolean               @default(true)
    role                            Role                  @default(USER)
    date                            String
    seen                            Boolean               @default(false)
    lastChat                        String?               @db.LongText
    lastChatType                    ChatType              @default(NORMAL)
    lastSentUserId                  String?
    lastSentUserImage               String?
    lastSentUserName                String?
    lastSentDate                    String?
    room                            Room                  @relation(fields: [roomSlug], references: [slug], onDelete: Cascade)
    roomSlug                        String
    user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                          String
    
    @@index([roomSlug, userId])
  }

  model Chat {
    id                              String                @id @default(cuid())
    index                           Int                   @unique @default(autoincrement())
    chattype                        ChatType              @default(NORMAL)
    message                         String                @db.LongText
    date                            String
    room                            Room                  @relation(fields: [roomSlug], references: [slug], onDelete: Cascade)
    roomSlug                        String
    user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                          String
    
    @@index([roomSlug, userId])
  }

  model Post {
    id                              String                @id
    index                           Int                   @unique @default(autoincrement())
    description                     String?               @db.LongText
    createdAt                       DateTime              @default(now())
    updatedAt                       DateTime              @default(now())
    stories                         Story[]
    likes                           Like[]
    comments                        Comment[]
    bookmarks                       Bookmark[]
    user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                          String

    @@index([userId])
  }

  model Story {
    id                              String                @id @default(cuid())
    index                           Int                   @unique @default(autoincrement())
    image                           String
    createdAt                       DateTime              @default(now())
    updatedAt                       DateTime              @default(now())
    post                            Post                  @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId                          String

    @@index([postId])
  }

  model Like {
    id                              String                @id @default(cuid())
    index                           Int                   @unique @default(autoincrement())
    createdAt                       DateTime              @default(now())
    updatedAt                       DateTime              @default(now())
    post                            Post                  @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId                          String
    user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                          String

    @@index([postId, userId])
  }

  model Comment {
    id                              String                @id @default(cuid())
    index                           Int                   @unique @default(autoincrement())
    message                         String                @db.LongText
    createdAt                       DateTime              @default(now())
    updatedAt                       DateTime              @default(now())
    post                            Post                  @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId                          String
    user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                          String

    @@index([postId, userId])
  }

  model Bookmark {
    id                              String                @id @default(cuid())
    index                           Int                   @unique @default(autoincrement())
    createdAt                       DateTime              @default(now())
    updatedAt                       DateTime              @default(now())
    post                            Post                  @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId                          String
    user                            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                          String

    @@index([postId, userId])
  }

  model Follows {
    id                              String                @unique @default(cuid())
    follower                        User                  @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    followerId                      String
    following                       User                  @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
    followingId                     String
    createdAt                       DateTime              @default(now())

    @@id([followerId, followingId])
    @@index([followerId, followingId])
  }

  enum Role {
    USER
    ADMIN
  }

  enum ChatType {
    NORMAL
    JOIN
    IMAGE
  }